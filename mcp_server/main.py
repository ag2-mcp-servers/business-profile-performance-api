# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:05:21+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query

from models import (
    Alt,
    DailyMetric,
    DailyMetrics,
    DailySubEntityTypeDayOfWeek,
    FetchMultiDailyMetricsTimeSeriesResponse,
    FieldXgafv,
    GetDailyMetricsTimeSeriesResponse,
    ListSearchKeywordImpressionsMonthlyResponse,
)

app = MCPProxy(
    contact={'name': 'Google', 'url': 'https://google.com', 'x-twitter': 'youtube'},
    description='The Business Profile Performance API allows merchants to fetch performance reports about their business profile on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.',
    license={
        'name': 'Creative Commons Attribution 3.0',
        'url': 'http://creativecommons.org/licenses/by/3.0/',
    },
    termsOfService='https://developers.google.com/terms/',
    title='Business Profile Performance API',
    version='v1',
    servers=[{'url': 'https://businessprofileperformance.googleapis.com/'}],
)


@app.get(
    '/v1/{location}:fetchMultiDailyMetricsTimeSeries',
    description="""  Returns the values for each date from a given time range and optionally the sub entity type, where applicable, that are associated with the specific daily metrics. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345:fetchMultiDailyMetricsTimeSeries?dailyMetrics=WEBSITE_CLICKS&dailyMetrics=CALL_CLICKS&daily_range.start_date.year=2022&daily_range.start_date.month=1&daily_range.start_date.day=1&daily_range.end_date.year=2022&daily_range.end_date.month=3&daily_range.end_date.day=31` """,
    tags=['location_metrics_retrieval', 'business_profile_performance_metrics'],
)
def fetch_location_daily_metrics_time_series(
    location: str,
    daily_metrics: Optional[DailyMetrics] = Query(None, alias='dailyMetrics'),
    daily_range_end_date_day: Optional[int] = Query(
        None, alias='dailyRange.endDate.day'
    ),
    daily_range_end_date_month: Optional[int] = Query(
        None, alias='dailyRange.endDate.month'
    ),
    daily_range_end_date_year: Optional[int] = Query(
        None, alias='dailyRange.endDate.year'
    ),
    daily_range_start_date_day: Optional[int] = Query(
        None, alias='dailyRange.startDate.day'
    ),
    daily_range_start_date_month: Optional[int] = Query(
        None, alias='dailyRange.startDate.month'
    ),
    daily_range_start_date_year: Optional[int] = Query(
        None, alias='dailyRange.startDate.year'
    ),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/{name}:getDailyMetricsTimeSeries',
    description="""  Returns the values for each date from a given time range that are associated with the specific daily metric. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345:getDailyMetricsTimeSeries?dailyMetric=WEBSITE_CLICKS&daily_range.start_date.year=2022&daily_range.start_date.month=1&daily_range.start_date.day=1&daily_range.end_date.year=2022&daily_range.end_date.month=3&daily_range.end_date.day=31` """,
    tags=['location_metrics_retrieval', 'business_profile_performance_metrics'],
)
def get_business_profile_daily_metrics_time_series(
    name: str,
    daily_metric: Optional[DailyMetric] = Query(None, alias='dailyMetric'),
    daily_range_end_date_day: Optional[int] = Query(
        None, alias='dailyRange.endDate.day'
    ),
    daily_range_end_date_month: Optional[int] = Query(
        None, alias='dailyRange.endDate.month'
    ),
    daily_range_end_date_year: Optional[int] = Query(
        None, alias='dailyRange.endDate.year'
    ),
    daily_range_start_date_day: Optional[int] = Query(
        None, alias='dailyRange.startDate.day'
    ),
    daily_range_start_date_month: Optional[int] = Query(
        None, alias='dailyRange.startDate.month'
    ),
    daily_range_start_date_year: Optional[int] = Query(
        None, alias='dailyRange.startDate.year'
    ),
    daily_sub_entity_type_day_of_week: Optional[DailySubEntityTypeDayOfWeek] = Query(
        None, alias='dailySubEntityType.dayOfWeek'
    ),
    daily_sub_entity_type_time_of_day_hours: Optional[int] = Query(
        None, alias='dailySubEntityType.timeOfDay.hours'
    ),
    daily_sub_entity_type_time_of_day_minutes: Optional[int] = Query(
        None, alias='dailySubEntityType.timeOfDay.minutes'
    ),
    daily_sub_entity_type_time_of_day_nanos: Optional[int] = Query(
        None, alias='dailySubEntityType.timeOfDay.nanos'
    ),
    daily_sub_entity_type_time_of_day_seconds: Optional[int] = Query(
        None, alias='dailySubEntityType.timeOfDay.seconds'
    ),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/{parent}/searchkeywords/impressions/monthly',
    description=""" Returns the search keywords used to find a business in search or maps. Each search keyword is accompanied by impressions which are aggregated on a monthly basis. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345/searchkeywords/impressions/monthly?monthly_range.start_month.year=2022&monthly_range.start_month.month=1&monthly_range.end_month.year=2022&monthly_range.end_month.month=3` """,
    tags=['business_profile_performance_metrics', 'location_metrics_retrieval'],
)
def get_business_profile_impressions_monthly_summary(
    parent: str,
    monthly_range_end_month_day: Optional[int] = Query(
        None, alias='monthlyRange.endMonth.day'
    ),
    monthly_range_end_month_month: Optional[int] = Query(
        None, alias='monthlyRange.endMonth.month'
    ),
    monthly_range_end_month_year: Optional[int] = Query(
        None, alias='monthlyRange.endMonth.year'
    ),
    monthly_range_start_month_day: Optional[int] = Query(
        None, alias='monthlyRange.startMonth.day'
    ),
    monthly_range_start_month_month: Optional[int] = Query(
        None, alias='monthlyRange.startMonth.month'
    ),
    monthly_range_start_month_year: Optional[int] = Query(
        None, alias='monthlyRange.startMonth.year'
    ),
    page_size: Optional[int] = Query(None, alias='pageSize'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
